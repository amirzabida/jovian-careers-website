Web Development with Python

Objective
- Explore web development and deployment with Python
- Create a “Jovian Careers” website listing job openings at Jovian
- Use a modern HTML & CSS framework for layout and styling
- Deploy the website to the cloud and attach a custom domain
Prerequisites
- Python
- Git
Topics Covered
- GitHub
- Replit
- Flask
- HTML
- CSS
- Bootstrap
- Deployment (render.com)
- Domains & DNS


Important Links
- Wireframes: https://app.excalidraw.com/s/2NiSy9956hc/8ihFsZTCbBo
- Finished site: https://joviancareers.xyz
Step 1 - Project Setup & Flask Basics
[ ] Create a project on GitHub 
[ ] Open up the project on Replit
[ ] Create and run a Flask web server
[ ] Push changes back to GitHub

References

- GitHub tutorial: https://docs.github.com/en/get-started/quickstart/hello-world
- Replit tutorial: https://docs.replit.com/tutorials/overview
- Flask tutorial: https://flask.palletsprojects.com/en/2.1.x/quickstart/
Step 2 - Web Pages with HTML & CSS 
[ ] Render templates and use static assets
[ ] Create the layout of the page using HTML tags
[ ] Style the page using CSS classes, properties, and values
[ ] Use the Bootstrap framework for faster development

References

- Excalidraw (virtual whiteboard): https://excalidraw.com/
- HTML tutorial: https://htmldog.com/guides/ , https://www.w3schools.com/html/
- CSS tutorial: https://htmldog.com/guides/css/ , https://www.w3schools.com/css/
- Jinja templates: https://realpython.com/primer-on-jinja-templating/
- Bootstrap docs: https://getbootstrap.com/docs/5.2/getting-started/introduction/


Step 3 - Dynamic Data & Cloud Deployment
[ ] Render dynamic data using Jinja template tags
[ ] Add an API route to return JSON
[ ] Deploy the project to Render.com 
[ ] Connect a domain with Render deployment

References

- Render.com deployment docs: https://render.com/docs/deploy-flask
- Google Domains: https://domains.google.com/
- Heroku flask deployment: https://devcenter.heroku.com/articles/getting-started-with-python


Step 4 - Functional & Aesthetic Improvements
[ ] Add a Navbar and Footer from Bootstrap
[ ] Add `mailto:` links for the buttons
[ ] Make the website mobile-friendly (responsive)
[ ] Refactor templates into reusable components


References

- Bootstrap examples: https://getbootstrap.com/docs/5.2/examples/
- Mailto Link Generator: https://mailtolink.me/
- Mailto Link tutorial: https://www.freecodecamp.org/news/mailto-link-how-to-make-an-html-email-link-example-code/
- Bootstrap docs: https://getbootstrap.com/docs/5.2/getting-started/introduction/


Future Work
- Create a page to show the details about the job (requirements etc.)
- Create a page to submit an application (instead of sending an email)
- Store information about jobs and applications in a cloud database
- Send email confirmation to candidate & Jovian admin after application
- Create an admin login interface to check submitted applications

